<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Tooling.tt" #>
<#@ output extension=".cs" #>
/* ============================================ *
 * This file has been auto-generated by a tool. *
 *  In case you change anything, please be ad-  *
 * vised that the changes will not be reflected *
 * in subsequent development cycles or pull re- *
 * quests on this repository.                   *
 * ============================================ */

using System;
using System.Collections.Generic;
using System.Linq;

namespace IX.Retry.StandardPolicies
{
    /// <summary>
    /// A count-based, non-linear retry policy that retries on a specific exception.
    /// </summary>
    /// <typeparam name="TException">The exception type to capture and retry on.</typeparam>
    public class CountBasedRetryPolicy<TException> : CountBasedRetryPolicy
        where TException : Exception
    {
        /// <summary>
        /// Instantiates a new instance of the <see cref="CountBasedRetryPolicy"/> class.
        /// </summary>
        /// <param name="maximumRetries">The maximum retry count for this count-based policy.</param>
        public CountBasedRetryPolicy(int maximumRetries)
            : base(maximumRetries, new[] { typeof(TException) })
        { }
    }
<#
for (int i = 2; i <= 16; i++)
{
    List<string> exceptionTypeParameters = new List<string>();
    for (int j = 1; j <= i; j++)
    {
        exceptionTypeParameters.Add(string.Format("TException{0}", j));
    }
    string exceptionTypeParams = string.Join(", ", exceptionTypeParameters);
#>

    /// <summary>
    /// A count-based, non-linear retry policy that retries on a specific set of exceptions.
    /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
    /// <typeparam name="TException<#=j#>">An exception type to capture and retry on.</typeparam>
<#
    }
#>
    public class CountBasedRetryPolicy<<#=exceptionTypeParams#>> : CountBasedRetryPolicy
<#
    for (int j = 1; j <= i; j++)
    {
#>
        where TException<#=j#> : Exception
<#
    }
    string exceptionTypeParamTypes = string.Join("), typeof(", exceptionTypeParameters);
#>
    {
        /// <summary>
        /// Instantiates a new instance of the <see cref="CountBasedRetryPolicy"/> class.
        /// </summary>
        /// <param name="maximumRetries">The maximum retry count for this count-based policy.</param>
        public CountBasedRetryPolicy(int maximumRetries)
            : base(maximumRetries, new[] { typeof(<#=exceptionTypeParamTypes#>) })
        { }
    }
<#
}
#>
}
<#
    FlushOutput(@"StandardPolicies\CountBasedRetryPolicy_GenericClasses.cs");
#>