<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Tooling.tt" #>
<#@ output extension=".cs" #>
/* ============================================ *
 * This file has been auto-generated by a tool. *
 *  In case you change anything, please be ad-  *
 * vised that the changes will not be reflected *
 * in subsequent development cycles or pull re- *
 * quests on this repository.                   *
 * ============================================ */

using System;
using System.Threading;
using System.Threading.Tasks;

namespace IX.Retry
{
    public static partial class With
    {
        /// <summary>
        /// Invokes an <see cref="System.Action"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <param name="action">The action to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the action.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync(Action action, IRetryPolicy retryPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
            return action.WithRetryAsync(retryPolicy, cancellationToken);
        }

        /// <summary>
        /// Invokes an <see cref="System.Action{T}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T">The action parameter type.</typeparam>
        /// <param name="action">The action to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the action.</param>
        /// <param name="arg">The action parameter, of the type specified in <typeparamref name="T"/>. This parameter is not null-checked and is forwarded directly to the action.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T>(Action<T> action, IRetryPolicy retryPolicy, T arg, CancellationToken cancellationToken = default(CancellationToken))
        {
            return action.WithRetryAsync(retryPolicy, arg, cancellationToken);
        }
<#
for (int i = 2; i <= 16; i++)
{
    List<string> exceptionTypeParameters = new List<string>();
    List<string> exceptionParameters = new List<string>();
    List<string> exceptionParams = new List<string>();
    for (int j = 1; j <= i; j++)
    {
        exceptionTypeParameters.Add(string.Format("T{0}", j));
        exceptionParameters.Add(string.Format("T{0} arg{0}", j));
        exceptionParams.Add(string.Format("arg{0}", j));
    }
    string exceptionTypeParametersString = string.Join(", ", exceptionTypeParameters);
    string exceptionParametersString = string.Join(", ", exceptionParameters);
    string exceptionParamsString = string.Join(", ", exceptionParams);
#>

        /// <summary>
        /// Invokes a <see cref="System.Action{<#=exceptionTypeParametersString#>}"/> with a retry policy and a cancellation token.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <typeparam name="T<#=j#>">Action parameter type no. <#=j#>.</typeparam>
<#
    }
#>
        /// <param name="func">The action to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#=j#>">Action parameter no. <#=j#>, of the type specified in <typeparamref name="T<#=j#>"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
<#
    }
#>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<<#=exceptionTypeParametersString#>>(Action<<#=exceptionTypeParametersString#>> action, IRetryPolicy retryPolicy, <#=exceptionParametersString#>, CancellationToken cancellationToken = default(CancellationToken))
        {
            return action.WithRetryAsync(retryPolicy, <#=exceptionParamsString#>, cancellationToken);
        }
<#
}
#>
    }
}
<#
    FlushOutput(@"With_AsyncAction.cs");
#>