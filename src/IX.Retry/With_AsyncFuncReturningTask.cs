/* ============================================ *
 * This file has been auto-generated by a tool. *
 *  In case you change anything, please be ad-  *
 * vised that the changes will not be reflected *
 * in subsequent development cycles or pull re- *
 * quests on this repository.                   *
 * ============================================ */

using System;
using System.Threading;
using System.Threading.Tasks;

namespace IX.Retry
{
    public static partial class With
    {
        /// <summary>
        /// Invokes a <see cref="System.Func{TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync(Func<Task> func, IRetryPolicy retryPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T">The function parameter type.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg">The function parameter, of the type specified in <typeparamref name="T"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T>(Func<T, Task> func, IRetryPolicy retryPolicy, T arg, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2>(Func<T1, T2, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3>(Func<T1, T2, T3, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4>(Func<T1, T2, T3, T4, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5>(Func<T1, T2, T3, T4, T5, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6>(Func<T1, T2, T3, T4, T5, T6, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7>(Func<T1, T2, T3, T4, T5, T6, T7, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8>(Func<T1, T2, T3, T4, T5, T6, T7, T8, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <typeparam name="T12">Function parameter type no. 12.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg12">Function parameter no. 12, of the type specified in <typeparamref name="T12"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <typeparam name="T12">Function parameter type no. 12.</typeparam>
        /// <typeparam name="T13">Function parameter type no. 13.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg12">Function parameter no. 12, of the type specified in <typeparamref name="T12"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg13">Function parameter no. 13, of the type specified in <typeparamref name="T13"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <typeparam name="T12">Function parameter type no. 12.</typeparam>
        /// <typeparam name="T13">Function parameter type no. 13.</typeparam>
        /// <typeparam name="T14">Function parameter type no. 14.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg12">Function parameter no. 12, of the type specified in <typeparamref name="T12"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg13">Function parameter no. 13, of the type specified in <typeparamref name="T13"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg14">Function parameter no. 14, of the type specified in <typeparamref name="T14"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <typeparam name="T12">Function parameter type no. 12.</typeparam>
        /// <typeparam name="T13">Function parameter type no. 13.</typeparam>
        /// <typeparam name="T14">Function parameter type no. 14.</typeparam>
        /// <typeparam name="T15">Function parameter type no. 15.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg12">Function parameter no. 12, of the type specified in <typeparamref name="T12"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg13">Function parameter no. 13, of the type specified in <typeparamref name="T13"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg14">Function parameter no. 14, of the type specified in <typeparamref name="T14"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg15">Function parameter no. 15, of the type specified in <typeparamref name="T15"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, cancellationToken);
        }

        /// <summary>
        /// Invokes a <see cref="System.Func{T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult}"/> with a retry policy and a cancellation token.
        /// </summary>
        /// <typeparam name="T1">Function parameter type no. 1.</typeparam>
        /// <typeparam name="T2">Function parameter type no. 2.</typeparam>
        /// <typeparam name="T3">Function parameter type no. 3.</typeparam>
        /// <typeparam name="T4">Function parameter type no. 4.</typeparam>
        /// <typeparam name="T5">Function parameter type no. 5.</typeparam>
        /// <typeparam name="T6">Function parameter type no. 6.</typeparam>
        /// <typeparam name="T7">Function parameter type no. 7.</typeparam>
        /// <typeparam name="T8">Function parameter type no. 8.</typeparam>
        /// <typeparam name="T9">Function parameter type no. 9.</typeparam>
        /// <typeparam name="T10">Function parameter type no. 10.</typeparam>
        /// <typeparam name="T11">Function parameter type no. 11.</typeparam>
        /// <typeparam name="T12">Function parameter type no. 12.</typeparam>
        /// <typeparam name="T13">Function parameter type no. 13.</typeparam>
        /// <typeparam name="T14">Function parameter type no. 14.</typeparam>
        /// <typeparam name="T15">Function parameter type no. 15.</typeparam>
        /// <typeparam name="T16">Function parameter type no. 16.</typeparam>
        /// <param name="func">The function to execute with retry.</param>
        /// <param name="retryPolicy">A retry policy to apply to the function.</param>
        /// <param name="arg1">Function parameter no. 1, of the type specified in <typeparamref name="T1"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg2">Function parameter no. 2, of the type specified in <typeparamref name="T2"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg3">Function parameter no. 3, of the type specified in <typeparamref name="T3"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg4">Function parameter no. 4, of the type specified in <typeparamref name="T4"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg5">Function parameter no. 5, of the type specified in <typeparamref name="T5"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg6">Function parameter no. 6, of the type specified in <typeparamref name="T6"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg7">Function parameter no. 7, of the type specified in <typeparamref name="T7"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg8">Function parameter no. 8, of the type specified in <typeparamref name="T8"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg9">Function parameter no. 9, of the type specified in <typeparamref name="T9"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg10">Function parameter no. 10, of the type specified in <typeparamref name="T10"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg11">Function parameter no. 11, of the type specified in <typeparamref name="T11"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg12">Function parameter no. 12, of the type specified in <typeparamref name="T12"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg13">Function parameter no. 13, of the type specified in <typeparamref name="T13"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg14">Function parameter no. 14, of the type specified in <typeparamref name="T14"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg15">Function parameter no. 15, of the type specified in <typeparamref name="T15"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="arg16">Function parameter no. 16, of the type specified in <typeparamref name="T16"/>. This parameter is not null-checked and is forwarded directly to the function.</param>
        /// <param name="cancellationToken">The task's (optional) <see cref="System.Threading.CancellationToken"/>.</param>
        /// <returns>A <see cref="System.Threading.Tasks.Task"/> that can be awaited.</returns>
        public static Task RetryAsync<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, Task> func, IRetryPolicy retryPolicy, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16, CancellationToken cancellationToken = default(CancellationToken))
        {
            return func.WithRetryAsync(retryPolicy, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, cancellationToken);
        }
    }
}
