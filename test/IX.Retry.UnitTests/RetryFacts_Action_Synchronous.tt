<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using Xunit;

namespace IX.Retry.UnitTests
{
<#
for (int t = 1; t <= 3; t++)
{
	for (int i = 0; i <= 16; i++)
	{
		List<string> parameters = new List<string>();
		List<string> parameterNames = new List<string>();
		List<string> parameterValues = new List<string>();
		for (int j = 1; j <= i; j++)
		{
			parameters.Add(string.Format("int param{0}", j));
			parameterNames.Add(string.Format("param{0}", j));
			parameterValues.Add(string.Format("int param{0} = r.Next();", j));
		}
#>

	public class RetryTest_Action_Synchronous_<#=i#>_<#=t#>
	{
		int retries;
		int maxRetries;

        [Fact]
        public void Test()
        {
			maxRetries = <#=t#>;
			retries = 0;

			Random r = new Random();
			<#= string.Join("\r\n            ", parameterValues) #>

            With.Retry(DelegateMethod_Action_Synchronous_<#=i#>_<#=t#>, Policy.TimeBasedRetryPolicy<InvalidOperationException>(TimeSpan.FromSeconds(<#=t#>))<#=parameterNames.Count > 0 ? ", " : ""#><#= string.Join(", ", parameterNames) #>);

			Assert.True(retries <= maxRetries);
        }

        private void DelegateMethod_Action_Synchronous_<#=i#>_<#=t#>(<#= string.Join(", ", parameters) #>)
        {
            if (retries < maxRetries)
            {
                retries++;
                throw new InvalidOperationException();
            }
        }
	}
<#
	}
}
#>
}